<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Build and Release]]></title>
  <link href="http://lifuzu.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://lifuzu.com/"/>
  <updated>2015-10-08T22:50:27-07:00</updated>
  <id>http://lifuzu.com/</id>
  <author>
    <name><![CDATA[Richard Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programming for Andorid: Synchronize Actions With Handler]]></title>
    <link href="http://lifuzu.com/blog/2015/01/19/programming-for-andorid-synchronize-actions-with-handler/"/>
    <updated>2015-01-19T20:32:10-08:00</updated>
    <id>http://lifuzu.com/blog/2015/01/19/programming-for-andorid-synchronize-actions-with-handler</id>
    <content type="html"><![CDATA[<p><img src="http://rxtracepz.dirkrodgersconsu.netdna-cdn.com/wp-content/uploads/2010/02/synchronized-swimmers.jpg" alt="enter image description here" /></p>

<p>Sometimes, we need to synchronize the actions in a series but not in parallel. For example, we need to download an image then display it on Google Gallery. It seems we cannot display a partial image during downloading. OK, there is another story, probably, we will mention later, for displaying image with a coarse one then detailed the clear picture. Now let&rsquo;s fix how to download an image then display it, without manual interference.</p>

<p>This program bases on the last one: <a href="http://lifuzu.com/blog/2015/01/16/programming-for-android-download/">Programming for Android: Download, Progressbar and FileProvider</a></p>

<!--more-->


<p><strong>Steps</strong>:</p>

<p><em>1</em>. Declare a handler and a message ID, which we need to indicate what action is completed:
```java</p>

<pre><code>Handler handler;
private static final int DOWNLOAD_COMPLETED = 0;
</code></pre>

<p>```</p>

<p><em>2</em>. Send out the message, when the first action is completed:
```java</p>

<pre><code>                // send message to trigger the following event
                Message msg = Message.obtain();
                msg.what = DOWNLOAD_COMPLETED;
                handler.sendMessage(msg);
</code></pre>

<p>```</p>

<p><em>3</em>. Handle the message, then trigger the following action(s):
```java</p>

<pre><code>    handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case DOWNLOAD_COMPLETED:
                    startDisplay();
                    break;
            }
        }
    };
</code></pre>

<p>```</p>

<p>You can clone the entire source code <a href="https://github.com/lifuzu/FileProviderExample">here</a> [2].</p>

<p><strong>References</strong>:</p>

<ol>
<li><a href="http://stackoverflow.com/questions/4592716/multithreading-question">http://stackoverflow.com/questions/4592716/multithreading-question</a></li>
<li><a href="https://github.com/lifuzu/FileProviderExample">https://github.com/lifuzu/FileProviderExample</a></li>
</ol>


<blockquote><p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p></blockquote>
]]></content>
  </entry>
  
</feed>
