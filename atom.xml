<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Build and Release]]></title>
  <link href="http://lifuzu.com/atom.xml" rel="self"/>
  <link href="http://lifuzu.com/"/>
  <updated>2014-01-05T22:20:34-08:00</updated>
  <id>http://lifuzu.com/</id>
  <author>
    <name><![CDATA[Richard Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gevent, Eventlet和Node.js的性能分析]]></title>
    <link href="http://lifuzu.com/blog/2014/01/05/performance-analysis-of-gevent-eventlet-and-nodejs/"/>
    <updated>2014-01-05T22:13:56-08:00</updated>
    <id>http://lifuzu.com/blog/2014/01/05/performance-analysis-of-gevent-eventlet-and-nodejs</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://myprogrammingjourney.blogspot.com/2011/03/meet-my-three-new-friends-eve-eventlet.html">http://myprogrammingjourney.blogspot.com/2011/03/meet-my-three-new-friends-eve-eventlet.html</a></p>

<p>碰到了我的三个朋友：Eve (<a href="eventlet.net">Eventlet</a>)和他的小弟Geve(<a href="gevent.org">Gevent</a>)，以及Node(nodejs.org)。全部三个都承诺对于响应多个Web客户端的请求的可扩展性。Eve是第一个轻巧的、非阻塞I/O 的python网络库。Eve的灵感来自于一个兽名Twisted，后者也提供了非阻塞I/O，但很重量级，不易tame。因此Eve为下一代轻量级的，可扩展的网络库铺平了道路。Geve虽然开始时是一个更年轻和更小的Eve版本，随着一些重大的修改，现在也已经发展成为最强大的Python网络库。它可以毫不费力地处理来自Web客户端的多个并发请求，很容易理解和实现。现在，这些Python脚本可以用来设计网页爬虫，网络机器人或Python/WSGI服务器，设计者真的很高兴能使用这些库来把他们的应用程序提升到一个新的水平。</p>

<p>一个Python的Web应用程序都有两个方面：服务器编程（在Python中完成）和客户端编程（使用HTML，CSS和JavaScript来完成）。Node.js通过提供一个JavaScript的Web开发框架，内置了一个高效的连接服务器和客户端编程之间的的HTTP 服务器。这个服务器也是可扩展的，重量轻，提供异步，非阻塞I/O。Node.js服务器其实更优于它的对手Python。Node.js允许服务器和客户端脚本都使用JavaScript。现在，这点对许多JavaScript程序员来说是个好消息。他们曾经对不能控制服务器端编程有点困惑。Node.js提供的服务器是强大的，但框架非常简单，需要许多组件支持。但是，随着Node.js的日益普及，越来越多的人也没闲着，他们提供一些有效的框架来支持Node.js。<a href="http://expressjs.com/">Express</a>就是其中一种。在<a href="https://npmjs.org/">npm</a>资源库中人们可以找到一些真正有用的JavaScript模块，这些模块是其他人在面临同样问题时开发的。这些模块都是免费的有点像Python cheese shop（PyPi）。</p>

<!--more-->


<p>无论怎么样，我想使用Apache Benchmark测试这三个框架。就是利用这三个朋友创建三个简单的服务器，然后利用Apache Benchmark抛出多个并发请求，看他们如何响应。对于服务器而言，就是返回一个简单的 Hello World 字符串。看看我们的代码：</p>

<p>先来Gevent：</p>

<div><script src='https://gist.github.com/8278468.js?file=geve.py'></script>
<noscript><pre><code>import gevent
from gevent import wsgi,pool
#the application to handle the response  
def app(environ,start_response):
  start_response(&quot;200 OK&quot;,[(&quot;Content-Type&quot;,&quot;text/plain&quot;)])
  return &quot;Hello World\n&quot;
if __name__==&quot;__main__&quot;:
  print &quot;The sweet thing is running on http://localhost:8912/&quot;
  pool=gevent.pool.Pool() #A pool of greenlets.Each greenlets runs the above defined function app for a client request  
  server=wsgi.WSGIServer((&quot;localhost&quot;,8912),app,spawn=pool) #the server is created and runs multiple greenlets concurrently  
  server.serve_forever() #the server is made to run in loop</code></pre></noscript></div>


<p>保存上述脚本为geve.py，在终端执行“$python geve.py”，这将触发Gevent服务器，端口为8912。现在在另一个终端窗口运行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ab -n 1000 -c 100 http://localhost:8912/</span></code></pre></td></tr></table></div></figure>


<p>上述命令运行用ab发出1000个请求（-n），100个并发请求（-c）到服务器。你可以改变的数字，这个取决于你的操作系统能力。检查以下行：“Time taken for tests:”，我这里的数字是：<strong>0.360</strong>秒。如下：</p>

<div><script src='https://gist.github.com/8278468.js?file=ab_gevent.log'></script>
<noscript><pre><code>$ sudo pip install gevent
$ ab -n 1000 -c 100 http://localhost:8912/
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 100 requests
...
Finished 1000 requests


Server Software:        
Server Hostname:        localhost
Server Port:            8912

Document Path:          /
Document Length:        12 bytes

Concurrency Level:      100
Time taken for tests:   0.360 seconds</code></pre></noscript></div>


<p>现在是Eventlet：</p>

<div><script src='https://gist.github.com/8278468.js?file=eve.py'></script>
<noscript><pre><code>import eventlet
from eventlet import wsgi
def app(environ,start_response):
  start_response(&quot;200 OK&quot;,[(&quot;Content-Type&quot;,&quot;text/plain&quot;)])
  return &quot;Hello World\n&quot;
if __name__==&quot;__main__&quot;:
  wsgi.server(eventlet.listen((&quot;localhost&quot;,6785)),app)</code></pre></noscript></div>


<p>保存为eve.py，然后用ab运行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ab -n 1000 -c 100 http://localhost:6785/</span></code></pre></td></tr></table></div></figure>


<p>结果是<strong>0.639</strong>秒。（注意区别）</p>

<div><script src='https://gist.github.com/8278468.js?file=ab_eventlet.log'></script>
<noscript><pre><code>$ ab -n 1000 -c 100 http://localhost:6785/
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 100 requests
...
Finished 1000 requests


Server Software:        
Server Hostname:        localhost
Server Port:            6785

Document Path:          /
Document Length:        12 bytes

Concurrency Level:      100
Time taken for tests:   0.639 seconds</code></pre></noscript></div>


<p>最后但并非最不重要的Node.js：</p>

<div><script src='https://gist.github.com/8278468.js?file=node.js'></script>
<noscript><pre><code>var http=require(&quot;http&quot;);
http.createServer(function(req,res){
  res.writeHead(200,{&quot;Content-Type&quot;:&quot;text/plain&quot;});
  res.end(&quot;Hello World\n&quot;);
}).listen(9124,&quot;localhost&quot;);
console.log(&quot;The sweet thing is running on http://localhost:9124&quot;);</code></pre></noscript></div>


<p>其结果是<strong>0.186</strong>秒（好吧，这个是最好的结果）。</p>

<div><script src='https://gist.github.com/8278468.js?file=ab_nodejs.log'></script>
<noscript><pre><code>$ ab -n 1000 -c 100 http://localhost:9124/
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 100 requests
...
Finished 1000 requests


Server Software:        
Server Hostname:        localhost
Server Port:            9124

Document Path:          /
Document Length:        12 bytes

Concurrency Level:      100
Time taken for tests:   0.186 seconds</code></pre></noscript></div>


<p>该分析在Ubunut（12.04.3）上执行。这里是<a href="https://gist.github.com/lifuzu/8278468/raw/c92933b471c63ed2b607ad09551655ba3274392d/hardware.info">硬件</a>以及<a href="https://gist.github.com/lifuzu/8278468/raw/ddb00a3d17f951c61a5a3deda272dd337bd27859/software.info">软件</a>信息。欢迎留下评论和分享您的经验。</p>

<blockquote><p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[企业家，而不是政府，才能拯救欧洲经济！]]></title>
    <link href="http://lifuzu.com/blog/2014/01/05/entrepreneurs-not-government-will-save-europe-economy/"/>
    <updated>2014-01-05T19:26:38-08:00</updated>
    <id>http://lifuzu.com/blog/2014/01/05/entrepreneurs-not-government-will-save-europe-economy</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://thenextweb.com/entrepreneur/2013/12/31/entrepreneurs-government-will-save-europes-economy/">http://thenextweb.com/entrepreneur/2013/12/31/entrepreneurs-government-will-save-europes-economy/</a></p>

<p>如果史蒂夫·乔布斯被一个比利时家庭，而不是一个美国家庭领养，非常可能的情况是他应该已经结束了在银行的工作，而不是共同创办苹果公司。
为什么呢？因为无论在哪里，公司的开办和运营都很难，但难度在欧洲更大，那里要受到地理位置，法规，语言和文化偏见的影响。</p>

<p>虽然创业和初创企业在欧洲大幅蔓延，但是仍然有很多有抱负的青年企业家离开欧洲，来到美国。一个真正的企业家很少会停止脚步，直到达到他／她的目标。改变他们的整个生活，移居到大洋彼岸，可以提高他们成功的机会。从我与他们的交往来看，美国的吸引力只有越来越强。</p>

<p>那么，欧洲应该做些什么呢？这里是我的三个建议。</p>

<!--more-->


<h3>1. 重点打造大公司</h3>

<p>欧洲有大量的小企业：餐馆，小的技术公司，服装店，理发店，等等。为什么不会产生足够多快速的成长，并最终庞大的创新型企业呢？这是一个问题。</p>

<p>看看世界最大的500家公司（世界500强）。据<a href="http://www.bruegel.org/">勃鲁盖尔</a> － 一家致力于国际经济研究的欧洲智库 － 从1975年到现在，欧洲设立了三个创新性的大公司，而美国是26个 。</p>

<p>当你考虑到欧洲有美国的两倍左右的人口时，这个数字更是惊人。现实情况是，如果欧洲要有竞争力的，它必须产生比现在多25倍以上的大公司！</p>

<p>获得资本在欧洲一直是一个挑战。获得种子资金（1M欧元或更少）是比较容易，但是要提高资金量（ 25M欧元及以上）以扩展您的公司在全球的业务仍然是困难的。大公司还提供一个重要的“退出战略”给初创公司。如果没有一个充满活力的退出市场，很难吸引到企业家和投资者。</p>

<p>大型企业在创造成功的创新中心中也发挥了重要作用。他们是催化剂，用于诞生天使投资人，提供分销通路，并作为一个温床为人才和管理人员提供实践的机会。</p>

<p>如果你看看硅谷，众多企业之一的惠普，在早期担负了这一角色，最近，一些成功的企业家已经从谷歌出现。</p>

<p>我建议欧洲政府要重点关注可能成为巨头的企业，而不是微不足道的小公司。很多时候，在那些企业的投资是有限的，或无增长潜力。</p>

<h3>2. 公平的竞争环境</h3>

<p>建立过一个全球性组织的人能理解欧洲工作条例也会妨碍初创企业的成长。税收高，很难去收购一家欧洲公司；遣散费更是高得离谱，非常难去解雇员工。</p>

<p>当您尝试在多个欧洲国家运营公司，情况只会变得更糟，<a href="http://thenextweb.com/entrepreneur/2013/12/27/branching-shouldnt-limit-startup-just-one-location/">任何有雄心打造一家大公司的人</a>不得不面对。每个国家是不同的，以至于它需要建立一个当地的法律实体，并具有当地会计师和当地律师。设立和运营这些法律实体要花费宝贵的时间和金钱，实际上这种运营和发展业务的方式造成了巨大的干扰。</p>

<p>欧洲需要推出有全球竞争力和整个欧洲统一的劳动法。我最担心的是试图推动创业的各个政府根本没有强大到足以解决欧洲的劳工法则。</p>

<h3>3. 改变我们的文化</h3>

<p>一个小企业可以在世界任何地方创立，但要成为下一个苹果是需要不同的野心的。创业者需要的最重要的事情是相信可以做到、值得承担风险和愿意投入辛苦的工作。有正确的文化释放的激情和必要的奉献精神才能成功。</p>

<p>硅谷是一种心态。若要在欧洲重新创立一个硅谷，必须首先采取硅谷的文化。我相信欧洲的文化将从采纳的部分美国梦中受益：平等主义的信念，每个人都能够通过努力工作获得成功，而且它是可以接受的；鼓励通过努力工作，以得到更好地自身价值体现。</p>

<p>这并不意味着欧洲需要放弃其强大的合作信念和其寻找更强大目标的美好愿望。我坚信，许多现代企业都可以“做的不错，做的好”。产生的价值为他们的股东，而且也对世界产生积极影响，以超越那些只知道创造利润的企业。</p>

<p>我们的世界不缺商业机会；有大量的需求还不能满足。驱动创业推动创新，创新可以帮助改变世界。成功地构建大型企业的企业家，尤其是那些解决了世界难题的，将使他人的生活变得更好，并在全球范围内推出更多的工作机会。</p>

<p>企业家，不是政府，将改变世界。是时候让欧洲来帮助他们的公司成长了。</p>

<blockquote><p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要有趣]]></title>
    <link href="http://lifuzu.com/blog/2013/12/28/dont-be-interesting/"/>
    <updated>2013-12-28T10:30:19-08:00</updated>
    <id>http://lifuzu.com/blog/2013/12/28/dont-be-interesting</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://orderedlist.com/blog/dont-be-interesting/">http://orderedlist.com/blog/dont-be-interesting/</a></p>

<p>我在上一次的文章［<a href="http://www.lifuzu.com/blog/2013/12/27/the-threat-of-creativity/">创造力的威胁</a>］中，解释了如何用规范的方法来设计，以创造更好的结果。但一个人如何去选择完美的功能组合，包括在设计中呢？</p>

<!-- more -->


<h3><strong>头脑风暴</strong></h3>

<p>首先通过头脑风暴来收集你的想法。与你的团队交谈。把你所有的想法，大的小的，都放在一个地方。与大家交谈过，想想他们给你的感觉是怎样的。尝试用一些简短的形容词来描述功能，越短越好。</p>

<h3><strong>缩减清单</strong></h3>

<p>根据我的经验，当谈到功能的时候，有许多关键字我能听到。我想讨论其中一个特别要引起警觉的：<strong>有趣</strong>。</p>

<p>这个 <em>有趣</em> 几乎总是清楚地表明，你正在讨论的事情并不重要。如果重要，为什么不能描述它呢？比如<em>很有用</em>，<em>省时省力</em>，<em>改变游戏规则</em>，<em>功能强大</em>，<em>精彩</em>，似乎有很多更好的词语来形容强大的功能。但是，当有人诉诸有趣，我听到的是：<strong>分心</strong>。</p>

<h3><strong>更多</strong></h3>

<p>你的设计应该比 <em>有趣</em> 多得多。兴趣可以变淡，毫无征兆。把你的设计聚焦在你的清单中让你最兴奋的那些形容词上。那些最能匹配这些形容词的功能，就是你应该开始的地方。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创造力的威胁]]></title>
    <link href="http://lifuzu.com/blog/2013/12/27/the-threat-of-creativity/"/>
    <updated>2013-12-27T23:02:42-08:00</updated>
    <id>http://lifuzu.com/blog/2013/12/27/the-threat-of-creativity</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://orderedlist.com/blog/the-threat-of-creativity/">http://orderedlist.com/blog/the-threat-of-creativity/</a></p>

<p>设计师往往赞美创造力的概念。那是以前从未存在的一个独特的，原创的想法。这需要想象力、技能、愿景、信心。</p>

<p>但以我的经验，优秀的设计很少有关创建新的东西。所谓的 <em>闪现-灵光</em> 不是发明，而是思想的升华。这种感觉惊人地简单，你不会觉得是全新的。而是感觉就像它应该一直是这样。了解了这一点，我要说，最好的设计是来自<strong>纪律</strong>，而不是创造力。</p>

<!-- more -->


<h3><strong>创意与执行</strong></h3>

<p>想法很廉价。有问题要解决吗？任何一群聪明的人都可以涌现出一堆可能的想法来解决问题。想出创意和解决方案<strong>绝不是</strong>设计的问题。几乎每一次，都会有<strong>太多的</strong>解决方案提出来。太多的好点子，事实上，多得如果你想将它们全部实现得话，你将面临一个可怕的结果。<em>实施创意的结果是千差万别的。</em></p>

<p>创意从来都不是良好设计的障碍。事实上，依靠创造力来解决设计问题经常会导致错误的执行。许多的创意仅仅是许许多多设计路径中的第一步。</p>

<p>对于创意真正有用的执行需要太多的东西，比这个想法本身多得多。它需要全面地理解这个问题，以及所有可能的解决方案。这需要研究、心想、反思、实验、提炼和<strong>纪律</strong>。</p>

<p>拒绝不能完全解决问题的好点子是相当重要的。如果你形容一个想法是有趣的，它可能不值得推行。这是设计纪律的艺术。当很多好的想法展示自己，很容易让你变得心烦意乱。不要让好的创意取代伟大的执行力。</p>

<h3><strong>聚焦</strong></h3>

<p>因此，设计师的重点不应该放在创意。他们的重点应该放在<strong>真正理解这一问题</strong>，深入而透彻。只有到那时，真正辉煌的解决方案将自己展示出来，很多时候，都是那些最明显的、简单的方法。</p>
]]></content>
  </entry>
  
</feed>
