<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Build and Release]]></title>
  <link href="http://lifuzu.com/atom.xml" rel="self"/>
  <link href="http://lifuzu.com/"/>
  <updated>2014-01-07T00:19:49-08:00</updated>
  <id>http://lifuzu.com/</id>
  <author>
    <name><![CDATA[Richard Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[开始的1000个用户比你想象的容易]]></title>
    <link href="http://lifuzu.com/blog/2014/01/07/the-first-1000-users-are-easier-then-you-think/"/>
    <updated>2014-01-07T00:15:20-08:00</updated>
    <id>http://lifuzu.com/blog/2014/01/07/the-first-1000-users-are-easier-then-you-think</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://thenextweb.com/entrepreneur/2014/01/05/first-1000-users-easier-think/">http://thenextweb.com/entrepreneur/2014/01/05/first-1000-users-easier-think/</a></p>

<p><img src="http://cdn1.tnwcdn.com/wp-content/blogs.dir/1/files/2012/01/store-657x245.jpg" alt="The first 1,000 users are easier than you think " /></p>

<p>这可能听起来很奇怪，但创造一些伟大的事情是作为一个企业家最简单的部分。难的是让客户对你的产品感到兴奋，就像你自己那样。</p>

<p>获得开始的1000个用户是一道坎，大多数初创企业和小企业都知道。<a href="https://www.lob.com/">Lob</a>的团队，这是一家通过一个简单的API把商业印刷和邮件的基础架构设置到云中的公司，也遇到了这个同样的问题。</p>

<p>这里有一些简单的窍门，Lob团队用来吸引他们的开始1,000家客户，并保持公司的成长，远远超出了最初的规模：</p>

<!--more-->


<h3>1. 小处着眼</h3>

<p>“一个用户是非常强大的，”Lob的联合创始人Leore阿维达说。按照阿维达的说法，找到的第一个用户是用户购买过程中最重要的一步。</p>

<p>毕竟，企业需要坚实的基础。如果你没有一个好的、具有开拓精神的团队，你就不能开创公司。同样，你的第一个用户是你以后客户成功案例的基础。 “有一个小目标，让你的目光聚焦于你需要做的，”阿维达说。</p>

<h3>2. 给你的第一个用户最棒的体验</h3>

<p>别让客户在门口停留，这一点很重要，确保该用户在你的公司或产品中获得最佳体验。</p>

<p>“有时候，你需要做些不可扩展的东西来获得第一批客户使用你的产品，” Daniel 赵，Lob的运营官说。一旦你成长，你可能无法花一个小时的电话进行故障诊断;因为你的客户群很小，你可以提供额外的、客户喜爱的服务。</p>

<p>你需要去超越你的第一个用户，因为这个人可以帮助确定你公司的未来。真正喜欢产品的客户可以通过口耳相传，给你带来更多的客户，从而导致有机增长。Daniel 赵说，最棒的用户体验“可以确定其他的客户怎么来找你。”</p>

<h3>3. 发现现在需要你的客户</h3>

<p>今天你需要针对你的客户以及最初聚焦于那些需要你的产品或平台的客户。这有助于消除周期长而笨重的销售流程，你可以得到立竿见影的效果。</p>

<p>“大规模应用之后，人就太多了，客户可能需要六个月才能使用服务，”阿维达警告说。 “第一个客户能够隔天就注册成功。这会给你的下一个客户提供更多的杠杆作用。“</p>

<h3>4. 针对你的理想客户，并找到他们</h3>

<p>这个过程中，最重要的部分是，在选择服务你的首个客户之前要知道你的理想客户。你应该了解你的客户所需要的，什么样的价值你的产品可以带来，什么地方您的顾客愿意投入时间。</p>

<p>Lob团队花费了大量的时间在这个方面，并与开发人员保持在线和离线联系。 “你真的必须要积极主动。你需要真正了解你的客户，“阿维达说。</p>

<p>公司有时会花费更多的时间保持联系，并帮助开发人员推荐他们的产品。</p>

<p>“我们把自己放在了那里，以人为本，以帮助正在构建的潜在客户，”阿维达说， “你需要确保你是社区的一部分。”</p>

<h3>5. 识别您的壁垒</h3>

<p>每一个公司或产品都有一些障碍阻止用户签约。你需要了解为什么你的一些线索都没有转化为用户。</p>

<p>这可能是简单的，只要加强沟通，更好的联系。对于Lob，团队确保文档和产品信息是在该公司的网站上，很方便得到。</p>

<p>“你是产品的制造商，所以你忘记了理解产品有多难，不是每个人都会清楚地了解产品，“赵说。 “保证你的价值主张是具有前瞻性和中心。确保每个人都能够理解你做什么，以及它如何能够帮助他们的业务。“</p>

<h3>6. 分享你的成功和积极主动</h3>

<p>不要把好消息只给自己，与社区和潜在的客户分享！信任是一个很大的障碍，尤其是在互联网上。分享深入的个案研究，并展示哪些客户已经在使用你的平台。</p>

<p>“人们看到其他客户使用该平台，这是很好的验证，”赵说。</p>

<p>该公司可确保团队成员都永远在线，所以帮助对使用者触手可即。当一个新的顾客完成购买，他们尽量在五分钟内回复。他们还在用户注册或采取行动时发送电子邮件。</p>

<p>“这表明有人真的在乎，”阿维达说。 “这是把小事累加起来的效应。”</p>

<p>让你的开始1000个用户，不会在你的手指间溜走。通过使用一些简单的技巧，就能保证在未来，你的开始的1000个用户吸引到数千人。</p>

<p>你是怎么得到了你的第一个1000个用户？欢迎在评论中分享！</p>

<blockquote><p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在“品牌体验”的时代经营企业]]></title>
    <link href="http://lifuzu.com/blog/2014/01/07/operating-a-business-in-the-age-of-the-brand-experience/"/>
    <updated>2014-01-07T00:05:28-08:00</updated>
    <id>http://lifuzu.com/blog/2014/01/07/operating-a-business-in-the-age-of-the-brand-experience</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://thenextweb.com/entrepreneur/2014/01/04/operating-business-age-brand-experience/">http://thenextweb.com/entrepreneur/2014/01/04/operating-business-age-brand-experience/</a></p>

<p><img src="http://cdn3.tnwcdn.com/wp-content/blogs.dir/1/files/2012/11/starbucks-645x250.jpg" alt="在“品牌体验”的时代经营企业" /></p>

<p>在过去三十年中，商业世界已经经历了显著的转变。传统的品牌理念已经远离实体，而迁移到虚拟世界。那些时代的卓越理念已经转变为被称为软件开发术语的“用户体验” &ndash; 客户体验的电子格式 &ndash; 来体现了。</p>

<p>不同的是，有人认为，一个“好”的用户体验和“坏”的用户体验，是一个公司的成功与失败的差别所在。因此，在蓬勃发展的数字化革命当中，用户体验成为关键。</p>

<p>但是，在过去的十年左右的时间里，伟大的用户体验似乎兜了一个圈。有一种回到实体世界的转变，所有的业务 &ndash; 产品，架构，印刷品，软件，移动应用，以及介于两者之间的所有东西都必须被视为一个统一的整体，从而使得企业获得成功。</p>

<p>我们如何发展到现在这个样子，什么使得企业向前发展，是一个迷人的故事。这个故事对那些愿意总结那些微妙的，但功能强大的经验的人而言，饱含教训。</p>

<p>“品牌”一词的传统含义出现在十九世纪末，在二十世纪的大部分时间里，发展缓慢但非常稳定。一个品牌是应用到一个实体的想法，最常见的是一种产品，但也可能是一个服务。一个品牌涵盖了一切产品或服务在理性和感性的层面上对客户的承诺。</p>

<!--more-->


<h3>进入个人电脑时代</h3>

<p>个人计算机在80年代初至90年代中期问世，从而，品牌的概念开始渗透到电子空间，即所谓的“虚拟世界”。</p>

<p>以前品牌应用到实体事物的概念得到了转移，转到了数字资产，如网站和操作系统。品牌的旧观念本身并没有消失，包括可口可乐和麦当劳，Tides和Chloroxes的世界仍然存在 &ndash; 但电子世界居于舞台中心了。</p>

<p>品牌的未来是虚拟和用户体验压倒一切。考虑“用户体验”这个词的词源是很重要的。它也不难，这是一个软件的词语，表示客户使用一个软件进行交互来达成一些要求的目标，理想情况下应该涉及购买产品的目标。</p>

<p>这种转变的两个主要例子是再熟悉不过的：苹果和亚马逊。在“疯狂伟大的”苹果操作系统和亚马逊的“粉碎 &ndash; 所有的竞争对手”在线市场改变了数字世界。 1999年左右，第三位选手出现了，谷歌推出了其简约的Web体验。
<img src="http://cdn0.tnwcdn.com/wp-content/blogs.dir/1/files/2013/12/Google-Logo.gif" alt="Google Logo" />
不久，互联网的所有复杂减化为一个白色的页面上的单选框。互联网，就像谷歌承诺的，可以是针对几个搜索词的简单价格和一个鼠标点击。这是最终的用户体验和几个数十亿美元的财富物化出来的白色屏幕上那个小盒子。</p>

<p>在此期间，新的动词进入了词典。商界领袖担忧，他们的公司将被“亚马逊化”。消费者掌握了“谷歌搜索”的艺术。突然间，用户体验变成了大家茶余饭后的谈资。</p>

<h3>飞去来器效应</h3>

<p>然后就出现了iPod和连接它的iTunes。仿佛被施了魔法，虚拟和实体再一次重逢。用户体验和品牌，就好像不是区别，或者相互排斥的东西，而只是同一个概念的不同方面。用户体验就是品牌体验，反之亦然。
<img src="http://cdn1.tnwcdn.com/wp-content/blogs.dir/1/files/2012/09/iPods.jpg" alt="IPod Logo" />
iPod不仅是一个美丽的实物产品，一个工业设计的符号。而且它的操作系统和非凡的iTunes完美地匹配了它的极简的设计。</p>

<p>走进一家新开的苹果零售店，就好像苹果的操作系统已经把“天才”驻留在蓝衫上，在零售体验，甚至在其门店非凡的架构设计中。如果一个人可以使用iPod，苹果承诺，就像可以浏览商店一样容易。</p>

<p>几乎在一夜之间，那些仅仅在几年之前鼓吹用户体验并告诫大家提防被“亚马逊化”的业务专家开始说被“苹果化”才是真正的威胁。今天，作为用户体验的典范，亚马逊和谷歌正在制造消费电子设备: Kindle和谷歌眼镜，还有其他。</p>

<p>同样，亚马逊的仓库和谷歌的山景城已经成为其母公司的实体延伸，就像苹果的零售店和Cupertino的总部似乎都体现了苹果的精髓。</p>

<h3>对商业的启示</h3>

<p>这种品牌体验的转变是一个有趣的事件，而今天的商界领袖要做出什么样的改变呢？对我来说，这意味着要保持领先的技术/内容，企业将不得不调整所有的品牌触点，包括实体的和围绕核心价值的品牌的数字表现。这就是“品牌体验”。</p>

<p>越来越多的技术创新将与新的硬件设备合并，来连接我们生活中完全不同的消费决策点，这就是人们经常谈论的“物联网”。每一个我们拥有的汽车、冰箱、酒窖、电视和设备都将联网，并通过智能手机，笔记本电脑，平板电脑或其他还没有发明出来的东西进行控制。</p>

<p>在这个世界里，实体和数字是一体的，品牌体验将成为主导。品牌体验的理念已经改变零售环境，它一定会很快进入餐馆和娱乐场所。</p>

<p>为了获得成功，在某些情况下获得生存，企业必须要学会从自己的虚拟和实体的基础设施中寻找价值。比较其他任何商店，苹果商店拥有单位平方尺的最高利润，即使是蒂芙尼公司。</p>

<p>提个醒，苹果没有在商店里卖钻石和铂金，它只是通过应用其特殊的“品牌体验”，以及它所做的一切，包括它的产品以及它品牌化的实体购物环境。</p>

<p>企业将同样必须制定一个在所有通路上统一的语音和语调。从本质上说，他们将需要创建一个品牌运营体系，在一台设备上工作的，也应该工作在所有其他设备上。这需要深刻的理解和赞赏公司的品牌支柱，这些支柱如何适用于各媒体，如何指导今后的迭代开发。</p>

<h3>那么，我们何去何从？</h3>

<p>进化到品牌体验的时代将会对全球很多的行业有益，很大程度上可以影响预测，以及一种21世纪事半功倍的效果。这些影响将波及在等式的两边，所有的必要的支持生态系统将扩展到零售，消费品，运输和建筑，以及在数字化设计和开发领域。</p>

<p>公司将不得不进行一次全方位关注，并认真思考如何精心打造品牌自身的个性，并被翻译成实体和数字化的东西，让客户可以立即识别出品牌运营体系,无论他们在哪里遇到它。这将需要前所未见的简化并精简到一定的程度。</p>

<blockquote><p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gevent, Eventlet和Node.js的性能分析]]></title>
    <link href="http://lifuzu.com/blog/2014/01/05/performance-analysis-of-gevent-eventlet-and-nodejs/"/>
    <updated>2014-01-05T22:13:56-08:00</updated>
    <id>http://lifuzu.com/blog/2014/01/05/performance-analysis-of-gevent-eventlet-and-nodejs</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://myprogrammingjourney.blogspot.com/2011/03/meet-my-three-new-friends-eve-eventlet.html">http://myprogrammingjourney.blogspot.com/2011/03/meet-my-three-new-friends-eve-eventlet.html</a></p>

<p>碰到了我的三个朋友：Eve (<a href="eventlet.net">Eventlet</a>)和他的小弟Geve(<a href="gevent.org">Gevent</a>)，以及Node(nodejs.org)。全部三个都承诺对于响应多个Web客户端的请求的可扩展性。Eve是第一个轻巧的、非阻塞I/O 的python网络库。Eve的灵感来自于一个兽名Twisted，后者也提供了非阻塞I/O，但很重量级，不易tame。因此Eve为下一代轻量级的，可扩展的网络库铺平了道路。Geve虽然开始时是一个更年轻和更小的Eve版本，随着一些重大的修改，现在也已经发展成为最强大的Python网络库。它可以毫不费力地处理来自Web客户端的多个并发请求，很容易理解和实现。现在，这些Python脚本可以用来设计网页爬虫，网络机器人或Python/WSGI服务器，设计者真的很高兴能使用这些库来把他们的应用程序提升到一个新的水平。</p>

<p>一个Python的Web应用程序都有两个方面：服务器编程（在Python中完成）和客户端编程（使用HTML，CSS和JavaScript来完成）。Node.js通过提供一个JavaScript的Web开发框架，内置了一个高效的连接服务器和客户端编程之间的的HTTP 服务器。这个服务器也是可扩展的，重量轻，提供异步，非阻塞I/O。Node.js服务器其实更优于它的对手Python。Node.js允许服务器和客户端脚本都使用JavaScript。现在，这点对许多JavaScript程序员来说是个好消息。他们曾经对不能控制服务器端编程有点困惑。Node.js提供的服务器是强大的，但框架非常简单，需要许多组件支持。但是，随着Node.js的日益普及，越来越多的人也没闲着，他们提供一些有效的框架来支持Node.js。<a href="http://expressjs.com/">Express</a>就是其中一种。在<a href="https://npmjs.org/">npm</a>资源库中人们可以找到一些真正有用的JavaScript模块，这些模块是其他人在面临同样问题时开发的。这些模块都是免费的有点像Python cheese shop（PyPi）。</p>

<!--more-->


<p>无论怎么样，我想使用Apache Benchmark测试这三个框架。就是利用这三个朋友创建三个简单的服务器，然后利用Apache Benchmark抛出多个并发请求，看他们如何响应。对于服务器而言，就是返回一个简单的 Hello World 字符串。看看我们的代码：</p>

<p>先来Gevent：</p>

<div><script src='https://gist.github.com/8278468.js?file=geve.py'></script>
<noscript><pre><code>import gevent
from gevent import wsgi,pool
#the application to handle the response  
def app(environ,start_response):
  start_response(&quot;200 OK&quot;,[(&quot;Content-Type&quot;,&quot;text/plain&quot;)])
  return &quot;Hello World\n&quot;
if __name__==&quot;__main__&quot;:
  print &quot;The sweet thing is running on http://localhost:8912/&quot;
  pool=gevent.pool.Pool() #A pool of greenlets.Each greenlets runs the above defined function app for a client request  
  server=wsgi.WSGIServer((&quot;localhost&quot;,8912),app,spawn=pool) #the server is created and runs multiple greenlets concurrently  
  server.serve_forever() #the server is made to run in loop</code></pre></noscript></div>


<p>保存上述脚本为geve.py，在终端执行“$python geve.py”，这将触发Gevent服务器，端口为8912。现在在另一个终端窗口运行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ab -n 1000 -c 100 http://localhost:8912/</span></code></pre></td></tr></table></div></figure>


<p>上述命令运行用ab发出1000个请求（-n），100个并发请求（-c）到服务器。你可以改变的数字，这个取决于你的操作系统能力。检查以下行：“Time taken for tests:”，我这里的数字是：<strong>0.360</strong>秒。如下：</p>

<div><script src='https://gist.github.com/8278468.js?file=ab_gevent.log'></script>
<noscript><pre><code>$ sudo pip install gevent
$ ab -n 1000 -c 100 http://localhost:8912/
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 100 requests
...
Finished 1000 requests


Server Software:        
Server Hostname:        localhost
Server Port:            8912

Document Path:          /
Document Length:        12 bytes

Concurrency Level:      100
Time taken for tests:   0.360 seconds</code></pre></noscript></div>


<p>现在是Eventlet：</p>

<div><script src='https://gist.github.com/8278468.js?file=eve.py'></script>
<noscript><pre><code>import eventlet
from eventlet import wsgi
def app(environ,start_response):
  start_response(&quot;200 OK&quot;,[(&quot;Content-Type&quot;,&quot;text/plain&quot;)])
  return &quot;Hello World\n&quot;
if __name__==&quot;__main__&quot;:
  wsgi.server(eventlet.listen((&quot;localhost&quot;,6785)),app)</code></pre></noscript></div>


<p>保存为eve.py，然后用ab运行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ab -n 1000 -c 100 http://localhost:6785/</span></code></pre></td></tr></table></div></figure>


<p>结果是<strong>0.639</strong>秒。（注意区别）</p>

<div><script src='https://gist.github.com/8278468.js?file=ab_eventlet.log'></script>
<noscript><pre><code>$ ab -n 1000 -c 100 http://localhost:6785/
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 100 requests
...
Finished 1000 requests


Server Software:        
Server Hostname:        localhost
Server Port:            6785

Document Path:          /
Document Length:        12 bytes

Concurrency Level:      100
Time taken for tests:   0.639 seconds</code></pre></noscript></div>


<p>最后但并非最不重要的Node.js：</p>

<div><script src='https://gist.github.com/8278468.js?file=node.js'></script>
<noscript><pre><code>var http=require(&quot;http&quot;);
http.createServer(function(req,res){
  res.writeHead(200,{&quot;Content-Type&quot;:&quot;text/plain&quot;});
  res.end(&quot;Hello World\n&quot;);
}).listen(9124,&quot;localhost&quot;);
console.log(&quot;The sweet thing is running on http://localhost:9124&quot;);</code></pre></noscript></div>


<p>其结果是<strong>0.186</strong>秒（好吧，这个是最好的结果）。</p>

<div><script src='https://gist.github.com/8278468.js?file=ab_nodejs.log'></script>
<noscript><pre><code>$ ab -n 1000 -c 100 http://localhost:9124/
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 100 requests
...
Finished 1000 requests


Server Software:        
Server Hostname:        localhost
Server Port:            9124

Document Path:          /
Document Length:        12 bytes

Concurrency Level:      100
Time taken for tests:   0.186 seconds</code></pre></noscript></div>


<p>该分析在Ubunut（12.04.3）上执行。这里是<a href="https://gist.github.com/lifuzu/8278468/raw/c92933b471c63ed2b607ad09551655ba3274392d/hardware.info">硬件</a>以及<a href="https://gist.github.com/lifuzu/8278468/raw/ddb00a3d17f951c61a5a3deda272dd337bd27859/software.info">软件</a>信息。欢迎留下评论和分享您的经验。</p>

<blockquote><p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[企业家，而不是政府，才能拯救欧洲经济！]]></title>
    <link href="http://lifuzu.com/blog/2014/01/05/entrepreneurs-not-government-will-save-europe-economy/"/>
    <updated>2014-01-05T19:26:38-08:00</updated>
    <id>http://lifuzu.com/blog/2014/01/05/entrepreneurs-not-government-will-save-europe-economy</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://thenextweb.com/entrepreneur/2013/12/31/entrepreneurs-government-will-save-europes-economy/">http://thenextweb.com/entrepreneur/2013/12/31/entrepreneurs-government-will-save-europes-economy/</a></p>

<p>如果史蒂夫·乔布斯被一个比利时家庭，而不是一个美国家庭领养，非常可能的情况是他应该已经结束了在银行的工作，而不是共同创办苹果公司。
为什么呢？因为无论在哪里，公司的开办和运营都很难，但难度在欧洲更大，那里要受到地理位置，法规，语言和文化偏见的影响。</p>

<p>虽然创业和初创企业在欧洲大幅蔓延，但是仍然有很多有抱负的青年企业家离开欧洲，来到美国。一个真正的企业家很少会停止脚步，直到达到他／她的目标。改变他们的整个生活，移居到大洋彼岸，可以提高他们成功的机会。从我与他们的交往来看，美国的吸引力只有越来越强。</p>

<p>那么，欧洲应该做些什么呢？这里是我的三个建议。</p>

<!--more-->


<h3>1. 重点打造大公司</h3>

<p>欧洲有大量的小企业：餐馆，小的技术公司，服装店，理发店，等等。为什么不会产生足够多快速的成长，并最终庞大的创新型企业呢？这是一个问题。</p>

<p>看看世界最大的500家公司（世界500强）。据<a href="http://www.bruegel.org/">勃鲁盖尔</a> － 一家致力于国际经济研究的欧洲智库 － 从1975年到现在，欧洲设立了三个创新性的大公司，而美国是26个 。</p>

<p>当你考虑到欧洲有美国的两倍左右的人口时，这个数字更是惊人。现实情况是，如果欧洲要有竞争力的，它必须产生比现在多25倍以上的大公司！</p>

<p>获得资本在欧洲一直是一个挑战。获得种子资金（1M欧元或更少）是比较容易，但是要提高资金量（ 25M欧元及以上）以扩展您的公司在全球的业务仍然是困难的。大公司还提供一个重要的“退出战略”给初创公司。如果没有一个充满活力的退出市场，很难吸引到企业家和投资者。</p>

<p>大型企业在创造成功的创新中心中也发挥了重要作用。他们是催化剂，用于诞生天使投资人，提供分销通路，并作为一个温床为人才和管理人员提供实践的机会。</p>

<p>如果你看看硅谷，众多企业之一的惠普，在早期担负了这一角色，最近，一些成功的企业家已经从谷歌出现。</p>

<p>我建议欧洲政府要重点关注可能成为巨头的企业，而不是微不足道的小公司。很多时候，在那些企业的投资是有限的，或无增长潜力。</p>

<h3>2. 公平的竞争环境</h3>

<p>建立过一个全球性组织的人能理解欧洲工作条例也会妨碍初创企业的成长。税收高，很难去收购一家欧洲公司；遣散费更是高得离谱，非常难去解雇员工。</p>

<p>当您尝试在多个欧洲国家运营公司，情况只会变得更糟，<a href="http://thenextweb.com/entrepreneur/2013/12/27/branching-shouldnt-limit-startup-just-one-location/">任何有雄心打造一家大公司的人</a>不得不面对。每个国家是不同的，以至于它需要建立一个当地的法律实体，并具有当地会计师和当地律师。设立和运营这些法律实体要花费宝贵的时间和金钱，实际上这种运营和发展业务的方式造成了巨大的干扰。</p>

<p>欧洲需要推出有全球竞争力和整个欧洲统一的劳动法。我最担心的是试图推动创业的各个政府根本没有强大到足以解决欧洲的劳工法则。</p>

<h3>3. 改变我们的文化</h3>

<p>一个小企业可以在世界任何地方创立，但要成为下一个苹果是需要不同的野心的。创业者需要的最重要的事情是相信可以做到、值得承担风险和愿意投入辛苦的工作。有正确的文化释放的激情和必要的奉献精神才能成功。</p>

<p>硅谷是一种心态。若要在欧洲重新创立一个硅谷，必须首先采取硅谷的文化。我相信欧洲的文化将从采纳的部分美国梦中受益：平等主义的信念，每个人都能够通过努力工作获得成功，而且它是可以接受的；鼓励通过努力工作，以得到更好地自身价值体现。</p>

<p>这并不意味着欧洲需要放弃其强大的合作信念和其寻找更强大目标的美好愿望。我坚信，许多现代企业都可以“做的不错，做的好”。产生的价值为他们的股东，而且也对世界产生积极影响，以超越那些只知道创造利润的企业。</p>

<p>我们的世界不缺商业机会；有大量的需求还不能满足。驱动创业推动创新，创新可以帮助改变世界。成功地构建大型企业的企业家，尤其是那些解决了世界难题的，将使他人的生活变得更好，并在全球范围内推出更多的工作机会。</p>

<p>企业家，不是政府，将改变世界。是时候让欧洲来帮助他们的公司成长了。</p>

<blockquote><p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要有趣]]></title>
    <link href="http://lifuzu.com/blog/2013/12/28/dont-be-interesting/"/>
    <updated>2013-12-28T10:30:19-08:00</updated>
    <id>http://lifuzu.com/blog/2013/12/28/dont-be-interesting</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://orderedlist.com/blog/dont-be-interesting/">http://orderedlist.com/blog/dont-be-interesting/</a></p>

<p>我在上一次的文章［<a href="http://www.lifuzu.com/blog/2013/12/27/the-threat-of-creativity/">创造力的威胁</a>］中，解释了如何用规范的方法来设计，以创造更好的结果。但一个人如何去选择完美的功能组合，包括在设计中呢？</p>

<!-- more -->


<h3><strong>头脑风暴</strong></h3>

<p>首先通过头脑风暴来收集你的想法。与你的团队交谈。把你所有的想法，大的小的，都放在一个地方。与大家交谈过，想想他们给你的感觉是怎样的。尝试用一些简短的形容词来描述功能，越短越好。</p>

<h3><strong>缩减清单</strong></h3>

<p>根据我的经验，当谈到功能的时候，有许多关键字我能听到。我想讨论其中一个特别要引起警觉的：<strong>有趣</strong>。</p>

<p>这个 <em>有趣</em> 几乎总是清楚地表明，你正在讨论的事情并不重要。如果重要，为什么不能描述它呢？比如<em>很有用</em>，<em>省时省力</em>，<em>改变游戏规则</em>，<em>功能强大</em>，<em>精彩</em>，似乎有很多更好的词语来形容强大的功能。但是，当有人诉诸有趣，我听到的是：<strong>分心</strong>。</p>

<h3><strong>更多</strong></h3>

<p>你的设计应该比 <em>有趣</em> 多得多。兴趣可以变淡，毫无征兆。把你的设计聚焦在你的清单中让你最兴奋的那些形容词上。那些最能匹配这些形容词的功能，就是你应该开始的地方。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创造力的威胁]]></title>
    <link href="http://lifuzu.com/blog/2013/12/27/the-threat-of-creativity/"/>
    <updated>2013-12-27T23:02:42-08:00</updated>
    <id>http://lifuzu.com/blog/2013/12/27/the-threat-of-creativity</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://orderedlist.com/blog/the-threat-of-creativity/">http://orderedlist.com/blog/the-threat-of-creativity/</a></p>

<p>设计师往往赞美创造力的概念。那是以前从未存在的一个独特的，原创的想法。这需要想象力、技能、愿景、信心。</p>

<p>但以我的经验，优秀的设计很少有关创建新的东西。所谓的 <em>闪现-灵光</em> 不是发明，而是思想的升华。这种感觉惊人地简单，你不会觉得是全新的。而是感觉就像它应该一直是这样。了解了这一点，我要说，最好的设计是来自<strong>纪律</strong>，而不是创造力。</p>

<!-- more -->


<h3><strong>创意与执行</strong></h3>

<p>想法很廉价。有问题要解决吗？任何一群聪明的人都可以涌现出一堆可能的想法来解决问题。想出创意和解决方案<strong>绝不是</strong>设计的问题。几乎每一次，都会有<strong>太多的</strong>解决方案提出来。太多的好点子，事实上，多得如果你想将它们全部实现得话，你将面临一个可怕的结果。<em>实施创意的结果是千差万别的。</em></p>

<p>创意从来都不是良好设计的障碍。事实上，依靠创造力来解决设计问题经常会导致错误的执行。许多的创意仅仅是许许多多设计路径中的第一步。</p>

<p>对于创意真正有用的执行需要太多的东西，比这个想法本身多得多。它需要全面地理解这个问题，以及所有可能的解决方案。这需要研究、心想、反思、实验、提炼和<strong>纪律</strong>。</p>

<p>拒绝不能完全解决问题的好点子是相当重要的。如果你形容一个想法是有趣的，它可能不值得推行。这是设计纪律的艺术。当很多好的想法展示自己，很容易让你变得心烦意乱。不要让好的创意取代伟大的执行力。</p>

<h3><strong>聚焦</strong></h3>

<p>因此，设计师的重点不应该放在创意。他们的重点应该放在<strong>真正理解这一问题</strong>，深入而透彻。只有到那时，真正辉煌的解决方案将自己展示出来，很多时候，都是那些最明显的、简单的方法。</p>
]]></content>
  </entry>
  
</feed>
